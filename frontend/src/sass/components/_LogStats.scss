@use "../conf";
@use "../colours";

.LogStats {
  margin: conf.$block-space-vertical conf.$block-space-horizontal;
  & .diagram-grid {
    @media screen and (min-width: conf.$bp-main) {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: conf.raster(2);
    }
    & section {
      @media screen and (min-width: conf.$bp-main) {
        margin: unset;
      }
    }
    & > *:nth-child(1) {
      grid-row: 1/3;
      grid-column: 1/2;
    }
    & > *:nth-child(2),
    & > *:nth-child(3) {
      grid-column: 2/3;
    }
  }
  & section {
    background: colours.$content-bg-dark;
    @include conf.ui-block();
    & > dl {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      width: 100%;
      @media screen and (min-width: conf.$bp-main) {
        grid-auto-columns: 1fr;
        grid-template-rows: repeat(2, auto);
      }
      & dl {
        margin: unset;
      }
      & > * {
        padding: conf.raster(1);
      }
      & dt {
        font-weight: 600;
        @media screen and (min-width: conf.$bp-main) {
          grid-row: 1/2;
        }
      }
      & > dt {
        @media screen and (min-width: conf.$bp-main) {
          background: colours.$content-bg-light;
        }
      }
      & dd {
        margin: unset;
        font-weight: 700;
      }
      & .num {
        color: colours.$content-dark;
        @include conf.font(700, normal, 4.5, body);
      }
      & > dt:nth-of-type(odd),
      & > dd:nth-of-type(odd) {
        @media screen and (max-width: conf.$bp-main) {
          background: colours.$content-bg-light;
        }
      }
    }
  }
  .text-large {
    @include conf.font(700, normal, 3.9, body);
    @media screen and (min-width: conf.$bp-main) {
      @include conf.font(700, normal, 2.4, body);
    }
  }
  .text-small {
    @include conf.font(700, normal, 3.3, body);
    @media screen and (min-width: conf.$bp-main) {
      @include conf.font(700, normal, 1.8, body);
    }
  }
  .text-value {
    fill: white;
  }
  .text-total {
    fill: colours.$content-dark;
  }
  .stacked-bar {
    background: grey;
    g {
      pointer-events: fill;
      rect:first-child {
        background: white;
      }
    }
    &:hover g,
    &:focus g {
      visibility: hidden;
    }
    g:hover,
    g:focus {
      visibility: visible;
    }
    g:hover .text-hidden,
    g:focus .text-hidden {
      fill: white;
    }
    text {
      fill: white;
    }
    .text-hidden {
      fill: transparent;
    }
  }
}
